# Interop Settings Template
# This file documents all available configuration options for Interop.
# Uncomment and edit the fields you wish to configure.

# =====================
# GLOBAL SETTINGS
# =====================

# log_level = "warning"         # Options: error, warning, verbose
# executable_search_paths = [   # Additional directories to search for executables
#   "~/.local/bin",
#   "~/bin"
# ]
# mcp_port = 8081               # Default port for the main MCP server

# Global environment variables (lowest priority, applied to all commands)
# env = { LOG_LEVEL = "info", NODE_ENV = "development" }

# =====================
# MCP SERVER CONFIGURATION
# =====================

#[mcp_servers.example]
#name = "example"               # Unique name for this MCP server (must match the key)
#description = "Example domain-specific server"
#port = 8082                    # Port for this MCP server

# =====================
# MCP PROMPTS
# =====================
# Define reusable prompts that MCP clients can access. Prompts are templates
# that help LLMs interact with your server effectively.
#
# Each prompt can be assigned to a specific MCP server using the 'mcp' field.
# If no 'mcp' field is specified, the prompt will be available on the default server.
#
# Prompts can also define arguments that allow customization when the prompt is used.

#[prompts.create_merge_request]
#name = "create_merge_request"
#description = "Complete MR creation workflow: analyzes branch changes, generates MR description, and creates the merge request"
#content = """
#You are helping create a merge request. Follow this workflow:
#
#1. **Analyze Branch Changes**: First, run the generate-cursor-prompt-for-mr command with target branch: {target_branch}
#2. **Review the Analysis**: Read the generated analysis and create an appropriate MR title: {mr_title}
#3. **Generate MR Description**: Based on the analysis, create a detailed MR description
#4. **Create the MR**: Run the create-mr command with the temp directory from step 1
#
#Include detailed changes: {include_detailed_changes}
#
#Make sure to:
#- Use clear, descriptive titles
#- Include context about what changed and why
#- Reference any related issues or tickets
#- Follow the team's MR guidelines
#"""
#arguments = [
#  { name = "target_branch", type = "string", description = "The branch you want to merge into", required = true },
#  { name = "mr_title", type = "string", description = "Title for the merge request", default = "" },
#  { name = "include_detailed_changes", type = "bool", description = "Include detailed file changes in description", default = true }
#]
# This prompt orchestrates multiple MCP commands in a workflow

#[prompts.code_review]
#name = "code_review"           # Name of the prompt (must match the key)
#description = "Code review assistance prompt"
#content = "Please review the following {language} code, focusing on {focus_area}. Look for potential issues, improvements, and best practices."
#mcp = "example"                # (Optional) Assign this prompt to a specific MCP server
#arguments = [                  # (Optional) Arguments for prompt customization
#  { name = "language", type = "string", description = "Programming language", required = true },
#  { name = "focus_area", type = "string", description = "Area to focus on", default = "general" }
#]

#[prompts.documentation]
#name = "documentation"         # Name of the prompt (must match the key)  
#description = "Generate technical documentation"
#content = """
#Generate comprehensive technical documentation for {topic}.
#
#Include examples: {include_examples}
#Detail level: {detail_level}/5
#
#Structure the documentation with:
#1. Overview and purpose
#2. Key concepts and terminology  
#3. Implementation details
#4. Usage examples (if requested)
#5. Best practices and recommendations
#"""
#arguments = [                  # Example with different argument types
#  { name = "topic", type = "string", description = "Documentation topic", required = true },
#  { name = "include_examples", type = "bool", description = "Include code examples", default = true },
#  { name = "detail_level", type = "number", description = "Detail level (1-5)", default = 3 }
#]
# No 'mcp' field means this prompt is available on the default server

# =====================
# MCP TOOLS & GLOBAL COMMANDS
# =====================
# Global commands automatically receive an optional "project_path" parameter when exposed as MCP tools.
# This allows AI assistants to specify a working directory for the command.
#
# A command is considered global unless it's bound to a project WITHOUT an alias.
# Commands with aliases remain global - only the alias becomes project-specific.
#
# Examples:
# - Command "build" with alias "b" in a project: "build" stays global, "b" is project-specific
# - Command "test" without alias in a project: "test" becomes project-specific
# - Command "deploy" not in any project: "deploy" is global
#
# Global commands can be run in any project directory by providing the project_path parameter.

# =====================
# ENVIRONMENT VARIABLE PRECEDENCE
# =====================
# Environment variables are merged with the following precedence (highest to lowest):
# 1. Command-level env (highest priority)
# 2. Project-level env (if executed in a project context) 
# 3. Global-level env
# 4. Shell's existing environment variables (lowest priority)
#
# Example: If you run "interop run test-api" in the my-api project:
# - LOG_LEVEL from command "test-api" overrides all others
# - DATABASE_URL from project "my-api" overrides global and shell
# - Global env variables override shell environment
# - Shell environment variables are the base

# =====================
# PROJECT DEFINITIONS
# =====================

#[projects.sample_project]
#path = "~/projects/sample"     # Path to the project directory (must be inside $HOME)
#description = "Sample project for demonstration"
# Project-specific environment variables (2nd priority, applied when running commands in this project)
#env = { DATABASE_URL = "postgres://user:pass@localhost:5432/mydb", PORT = "3000" }
#commands = [                   # List of commands for this project (with optional aliases)
#  { command_name = "build", alias = "b" },
#  { command_name = "test" }
#]

# =====================
# COMMAND DEFINITIONS
# =====================

#[commands.build]
#cmd = "go build ./..."         # The shell command or executable to run
#description = "Build the project"
#is_enabled = true              # Enable or disable this command
#is_executable = false          # If true, run as an executable; if false, run in shell
#mcp = "example"                # (Optional) Assign this command to a specific MCP server
# Command-specific environment variables (highest priority, override all others)
#env = { LOG_LEVEL = "debug", CGO_ENABLED = "0" }
#pre_exec = [                   # (Optional) Commands to run before the main command
#  "echo 'Starting build...'",
#  "go mod tidy"
#]
#post_exec = [                  # (Optional) Commands to run after the main command
#  "echo 'Build completed'"
#]
#arguments = [                  # (Optional) List of arguments for this command
#  { name = "output_file", type = "string", description = "Output file name", required = true },
#  { name = "package", type = "string", description = "Package to build", default = "./cmd/app" }
#]

#[commands.test]
#cmd = "go test ./..."
#description = "Run tests"
#is_enabled = true
#is_executable = false
# Example: Set test-specific environment variables
#env = { GO_ENV = "test", LOG_LEVEL = "debug" }

#[commands.deploy]
#cmd = "deploy.sh"
#description = "Deploy the project"
#is_enabled = true
#is_executable = true
#mcp = "example"
# Example: Set deployment environment variables
#env = { DEPLOY_ENV = "production", LOG_LEVEL = "error" }

# =====================
# COMMAND ARGUMENT TYPES
# =====================
# type: string | number | bool
# Example:
# arguments = [
#   { name = "type", type = "string", description = "Component type", required = true },
#   { name = "force", type = "bool", description = "Overwrite if exists", default = false }
# ]

# =====================
# COMPLETE ENVIRONMENT VARIABLE EXAMPLE
# =====================
# This example demonstrates environment variable injection at all levels:

# Global environment variables - applied to all commands
# env = { LOG_LEVEL = "info", NODE_ENV = "development" }

# [projects.my-api]
# path = "~/dev/my-api"
# description = "My API project"
# # Project-specific environment variables
# env = { DATABASE_URL = "postgres://user:pass@localhost:5432/mydb", API_PORT = "8080" }
# commands = [{ command_name = "test-api" }]

# [commands.test-api]
# cmd = "go test ./..."
# description = "Run API tests"
# # Command-specific environment variables (highest priority)
# env = { LOG_LEVEL = "debug", GIN_MODE = "test" }

# When running "interop run test-api" in the my-api project context, the final environment would be:
# - GIN_MODE=test (from command)
# - LOG_LEVEL=debug (from command, overriding global "info")
# - DATABASE_URL=postgres://user:pass@localhost:5432/mydb (from project)
# - API_PORT=8080 (from project)
# - NODE_ENV=development (from global)
# - Plus all existing shell environment variables (lowest priority)

# =====================
# PRE- AND POST-EXECUTION HOOKS EXAMPLE
# =====================
# This example demonstrates using pre_exec and post_exec hooks for complex workflows

#[commands.run-integration-tests]
#cmd = "npm test"
#description = "Run the integration test suite"
#pre_exec = [
#    "docker-compose up -d test-db", # Start a database
#    "sleep 5",
#    "interop run db-migrate"         # Use another interop command
#]
#post_exec = [
#    "docker-compose down" # Always run to clean up
#]

#[commands.db-migrate]
#cmd = "npm run migrate"
#description = "Run database migrations"

# =====================
# END OF TEMPLATE
# =====================
